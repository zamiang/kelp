import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import MuiLink from '@material-ui/core/Link';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import clsx from 'clsx';
import { format } from 'date-fns';
import React, { useEffect, useState } from 'react';
import Linkify from 'react-linkify';
import { useParams } from 'react-router-dom';
import EmailIcon from '../../public/icons/email-orange.svg';
import SaveIcon from '../../public/icons/save-orange.svg';
import VideoIcon from '../../public/icons/video-white.svg';
import AttendeeList from '../shared/attendee-list';
import useButtonStyles from '../shared/button-styles';
import useExpandStyles from '../shared/expand-styles';
import useRowStyles from '../shared/row-styles';
import {
  IFormattedAttendee,
  ISegment,
  ISegmentTag,
  IWebsite,
  IWebsiteTag,
} from '../store/data-types';
import { IStore } from '../store/use-store';
import { IFeaturedWebsite, getWebsitesForMeeting } from '../website/get-featured-websites';
import { LargeWebsite } from '../website/large-website';
import { WebsiteHighlights } from '../website/website-highlights';

const maxNumberOfWebsites = 6;

const EmailGuestsButton = (props: {
  meeting: ISegment;
  websites: IFeaturedWebsite[];
  websiteStore: IStore['websitesStore'];
}) => {
  const buttonClasses = useButtonStyles();

  const [websites, setWebsites] = useState<(IWebsite | undefined)[]>([]);
  const websiteIds = props.websites.map((w) => w.websiteId);

  useEffect(() => {
    const fetchData = async () => {
      const w = await Promise.all(websiteIds.map(async (id) => props.websiteStore.getById(id)));
      setWebsites(w);
    };
    void fetchData();
  }, [websiteIds.join('')]);

  const bodyText = `Hello, %0D%0A%0D%0A${websites
    .map((d) => `${d?.title} - ${d?.url}%0D%0A`)
    .join(' ')}%0D%0A%0D%0AThanks,%0D%0A%0D%0AEmail generated by http://www.kelp.nyc `;
  const link = `mailto:${props.meeting.attendees.map((a) => a.email).join(',')}?subject=${
    props.meeting.summary
  }&body=${bodyText}`;

  return (
    <Tooltip title="Email guests">
      <IconButton
        onClick={() => window.open(link)}
        color="primary"
        className={buttonClasses.iconButton}
      >
        <EmailIcon width="24" height="24" />
      </IconButton>
    </Tooltip>
  );
};

const ExpandedMeeting = (props: {
  store: IStore;
  meetingId?: string;
  close?: () => void;
  isDarkMode: boolean;
  hideHeader?: boolean;
  hideWebsite: (item: IFeaturedWebsite) => void;
  hideDialogUrl?: string;
  toggleWebsiteTag: (tag: string, websiteId: string) => Promise<void>;
  websiteTags: IWebsiteTag[];
}) => {
  const classes = useExpandStyles();
  const buttonClasses = useButtonStyles();
  const rowStyles = useRowStyles();
  const { slug }: any = useParams();
  const meetingId = props.meetingId || slug;
  const [meeting, setMeeting] = useState<ISegment | undefined>(undefined);
  const [attendees, setAttendees] = useState<IFormattedAttendee[]>([]);
  const [currentTag, setTag] = useState<string>('all');
  const [websites, setWebsites] = useState<IFeaturedWebsite[]>([]);
  // used to refetch websites
  const [pinIncrement, setPinIncrement] = useState(0);
  const [segmentTags, setSegmentTags] = useState<ISegmentTag[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      if (meetingId) {
        const result = await props.store.timeDataStore.getById(meetingId);
        setMeeting(result);
      }
    };
    void fetchData();
  }, [props.store.isLoading, meetingId]);

  useEffect(() => {
    const fetchData = async () => {
      if (meetingId) {
        const result = await props.store.attendeeDataStore.getAllForSegmentId(meetingId);
        setAttendees(result);
      }
    };
    void fetchData();
  }, [props.store.isLoading, meetingId]);

  useEffect(() => {
    const fetchData = async () => {
      if (meeting) {
        const result = await getWebsitesForMeeting(meeting, props.store);
        setWebsites(result.slice(0, maxNumberOfWebsites));
      }
    };
    void fetchData();
  }, [props.store.isLoading, meeting?.id, pinIncrement, props.hideDialogUrl]);

  useEffect(() => {
    const fetchData = async () => {
      const result = await props.store.segmentTagStore.getAll();
      setSegmentTags(result);
    };
    void fetchData();
  }, [props.store.lastUpdated, props.meetingId]);

  const relevantTags = segmentTags.filter((t) => {
    const isTextTheSame =
      (t.segmentSummary || '').length > 1 &&
      (meeting?.summary || '').length > 1 &&
      t.segmentSummary === meeting?.summary;
    const isIdTheSame = t.segmentId === meeting?.id;
    return isIdTheSame || isTextTheSame;
  });

  const togglePin = async (item: IFeaturedWebsite, isPinned: boolean) => {
    if (isPinned) {
      await props.store.websitePinStore.delete(item.websiteId);
    } else {
      await props.store.websitePinStore.create(item.websiteId);
    }
    setPinIncrement(pinIncrement + 1);
  };

  if (!meeting) {
    return null;
  }
  const videoLinkDomain = meeting.videoLink ? new URL(meeting.videoLink).hostname : undefined;
  const shouldShowMeetingLink = !!meeting.videoLink;
  const hasAttendees = attendees.length > 0;
  const hasDescription = meeting.description && meeting.description.length > 0;

  const isHtml = meeting.description && /<\/?[a-z][\s\S]*>/i.test(meeting.description);

  const hasMeetingNotes = !!meeting.meetingNotesLink;
  const meetingDescriptionIsMicrosoftHtml =
    isHtml && meeting.description?.includes('<span itemscope');
  const hasWebsites = websites.length > 0 || relevantTags.length > 0;
  return (
    <React.Fragment>
      <Grid
        container
        className={classes.topContainer}
        justifyContent="space-between"
        alignItems="center"
      >
        <Grid item>
          <Typography variant="h3" gutterBottom>
            {meeting.summary || '(no title)'}
          </Typography>
          <Typography variant="h5">
            {format(meeting.start, 'EEEE, MMMM d')} ⋅ {format(meeting.start, 'p')} –{' '}
            {format(meeting.end, 'p')}
          </Typography>
        </Grid>
        <Grid item>
          <Grid container spacing={2}>
            {hasMeetingNotes && (
              <Grid item>
                <Tooltip title="Open meeting notes">
                  <IconButton
                    color="primary"
                    onClick={() => window.open(meeting.meetingNotesLink, '_blank')}
                    className={buttonClasses.iconButton}
                  >
                    <SaveIcon width="24" height="24" />
                  </IconButton>
                </Tooltip>
              </Grid>
            )}
            <Grid item>
              <EmailGuestsButton
                meeting={meeting}
                websites={websites}
                websiteStore={props.store.websitesStore}
              />
            </Grid>
            {shouldShowMeetingLink && (
              <Grid item>
                <Button
                  onClick={() => window.open(meeting.videoLink, '_blank')}
                  variant="contained"
                  disableElevation
                  color="primary"
                  startIcon={<VideoIcon width="24" height="24" />}
                  className={buttonClasses.button}
                >
                  Join {videoLinkDomain}
                </Button>
              </Grid>
            )}
          </Grid>
        </Grid>
      </Grid>
      <Grid container className={classes.buttonSecton} spacing={2}>
        {hasWebsites && (
          <Grid item>
            <Typography
              onClick={() =>
                document.getElementById('websites')?.scrollIntoView({ behavior: 'smooth' })
              }
              className={buttonClasses.greyButton}
            >
              Websites
            </Typography>
          </Grid>
        )}
        {attendees.length > 0 && (
          <Grid item>
            <Typography
              onClick={() =>
                document.getElementById('people')?.scrollIntoView({ behavior: 'smooth' })
              }
              className={buttonClasses.greyButton}
            >
              Guests
            </Typography>
          </Grid>
        )}
      </Grid>
      <div className={classes.container}>
        {hasWebsites && (
          <div className={classes.section} id="websites">
            <Grid container alignItems="center" spacing={2}>
              <Grid item>
                <Typography className={rowStyles.rowText}>Filter by:</Typography>
              </Grid>
              <Grid item>
                <Typography
                  className={clsx(classes.tag, currentTag === 'all' && classes.tagSelected)}
                  onClick={() => setTag('all')}
                >
                  All
                </Typography>
              </Grid>
              {relevantTags.map((t) => (
                <Grid item key={t.tag}>
                  <Typography
                    className={clsx(classes.tag, currentTag === t.tag && classes.tagSelected)}
                    onClick={() => setTag(t.tag)}
                  >
                    {t.tag}
                  </Typography>
                </Grid>
              ))}
            </Grid>
            <br />
            {currentTag === 'all' && (
              <Grid container spacing={4}>
                {websites.map((item) => (
                  <LargeWebsite
                    key={item.websiteId}
                    item={item}
                    store={props.store}
                    isDarkMode={props.isDarkMode}
                    hideItem={props.hideWebsite}
                    togglePin={togglePin}
                    websiteTags={props.websiteTags}
                    toggleWebsiteTag={props.toggleWebsiteTag}
                  />
                ))}
              </Grid>
            )}
            {currentTag !== 'all' && (
              <WebsiteHighlights
                store={props.store}
                currentFilter={'all'}
                websiteTags={props.websiteTags}
                hideWebsite={props.hideWebsite}
                hideDialogUrl={props.hideDialogUrl}
                isDarkMode={props.isDarkMode}
                toggleWebsiteTag={props.toggleWebsiteTag}
                filterByTag={currentTag}
              />
            )}
          </div>
        )}
        {hasDescription && !isHtml && (
          <div className={classes.section}>
            <Typography variant="h6" className={rowStyles.rowText}>
              Description
            </Typography>
            <Typography className={classes.description}>
              <Linkify>{meeting.description?.trim()}</Linkify>
            </Typography>
          </div>
        )}
        {hasDescription && isHtml && (
          <div className={classes.section}>
            <Typography variant="h6" className={rowStyles.rowText}>
              Description
            </Typography>
            <Typography
              className={clsx(
                classes.description,
                meetingDescriptionIsMicrosoftHtml && classes.descriptionMicrosoft,
              )}
              dangerouslySetInnerHTML={{ __html: meeting.description!.trim() }}
            />
          </div>
        )}
        {hasAttendees && (
          <div className={classes.section} id="people">
            <Typography variant="h6" className={rowStyles.rowText}>
              Guests
            </Typography>
            <AttendeeList
              personStore={props.store.personDataStore}
              attendees={attendees}
              showAll={false}
              isSmall={true}
            />
          </div>
        )}
        {meeting.location && (
          <div className={classes.section}>
            <Typography variant="h6" className={rowStyles.rowText}>
              Location
            </Typography>
            <MuiLink
              className={classes.overflowEllipsis}
              href={`https://maps.google.com/?q=${meeting.location}`}
            >
              {meeting.location}
            </MuiLink>
          </div>
        )}
      </div>
    </React.Fragment>
  );
};

export default ExpandedMeeting;
