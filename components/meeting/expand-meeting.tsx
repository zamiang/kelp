import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import MuiLink from '@mui/material/Link';
import Tooltip from '@mui/material/Tooltip';
import Typography from '@mui/material/Typography';
import useMediaQuery from '@mui/material/useMediaQuery';
import useTheme from '@mui/styles/useTheme';
import clsx from 'clsx';
import { format } from 'date-fns';
import React, { useEffect, useState } from 'react';
import Linkify from 'react-linkify';
import { useParams } from 'react-router-dom';
import config from '../../constants/config';
import EmailIcon from '../../public/icons/email.svg';
import PlusIcon from '../../public/icons/plus.svg';
import SaveIcon from '../../public/icons/save.svg';
import VideoIcon from '../../public/icons/video.svg';
import AttendeeList from '../shared/attendee-list';
import { Row, classes } from '../shared/row-styles';
import {
  IFormattedAttendee,
  ISegment,
  ISegmentTag,
  IWebsiteItem,
  IWebsiteTag,
} from '../store/data-types';
import { IStore } from '../store/use-store';
import { AddTagToMeetingDialog } from '../website/add-tag-to-meeting-dialog';
import {
  IFeaturedWebsite,
  IWebsiteCache,
  getWebsitesForMeeting,
} from '../website/get-featured-websites';
import { LargeWebsite } from '../website/large-website';
import { WebsiteHighlights } from '../website/website-highlights';
import { isSegmentTagSelected } from './featured-meeting';

const maxNumberOfWebsites = 6;

const EmailGuestsButton = (props: {
  meeting: ISegment;
  websites: IFeaturedWebsite[];
  websiteStore: IStore['websiteStore'];
}) => {
  const [websites, setWebsites] = useState<(IWebsiteItem | undefined)[]>([]);
  const websiteIds = props.websites.map((w) => w.id);

  useEffect(() => {
    const fetchData = async () => {
      const results = await Promise.all(
        websiteIds.map(async (id) => props.websiteStore.getById(id)),
      );
      const websites = results
        .filter((result) => result.success)
        .map((result) => (result.success ? result.data : undefined))
        .filter((website): website is IWebsiteItem => website !== undefined);
      setWebsites(websites);
    };
    void fetchData();
  }, [websiteIds.join('')]);

  const bodyText = `Hello, %0D%0A%0D%0A${websites
    .map((d) => `${d?.title} - ${d?.id}%0D%0A`)
    .join(' ')}%0D%0A%0D%0AThanks,%0D%0A%0D%0AEmail generated by http://www.kelp.nyc `;
  const link = `mailto:${props.meeting.attendees.map((a) => a.email).join(',')}?subject=${
    props.meeting.summary
  }&body=${bodyText}`;

  return (
    <Button
      onClick={() => window.open(link)}
      variant="outlined"
      disableElevation
      color="primary"
      className={classes.button}
      startIcon={
        <EmailIcon
          width={config.ICON_SIZE}
          height={config.ICON_SIZE}
          className={classes.iconPrimary}
        />
      }
    >
      Email Guests
    </Button>
  );
};

const ExpandedMeeting = (props: {
  store: IStore;
  meetingId?: string;
  close?: () => void;
  hideHeader?: boolean;
  toggleWebsiteTag: (tag: string, websiteId: string) => Promise<void>;
  websiteTags: IWebsiteTag[];
  websiteCache: IWebsiteCache;
}) => {
  const { slug }: any = useParams();
  const meetingId = props.meetingId || slug;
  const [meeting, setMeeting] = useState<ISegment | undefined>(undefined);
  const [attendees, setAttendees] = useState<IFormattedAttendee[]>([]);
  const [currentTag, setTag] = useState<string>('all');
  const [websites, setWebsites] = useState<IFeaturedWebsite[]>([]);
  const [segmentTags, setSegmentTags] = useState<ISegmentTag[]>([]);
  const [isAddTagsVisible, setAddTagsVisible] = useState(false);

  const theme = useTheme();
  const isMobile = useMediaQuery((theme as any).breakpoints.down('lg'), {
    defaultMatches: true,
  });

  useEffect(() => {
    const fetchData = async () => {
      if (meetingId) {
        const result = await props.store.timeDataStore.getById(meetingId);
        if (result.success) {
          setMeeting(result.data);
        } else {
          console.error('Failed to fetch meeting:', (result as any).error);
          setMeeting(undefined);
        }
      }
    };
    void fetchData();
  }, [props.store.isLoading, meetingId]);

  useEffect(() => {
    const fetchData = async () => {
      if (meetingId) {
        const result = await props.store.attendeeDataStore.getAllForSegmentId(meetingId);
        setAttendees(result);
      }
    };
    void fetchData();
  }, [props.store.isLoading, meetingId]);

  useEffect(() => {
    const fetchData = async () => {
      if (meeting) {
        const result = await getWebsitesForMeeting(meeting, props.store);
        setWebsites(result.slice(0, maxNumberOfWebsites));
      }
    };
    void fetchData();
  }, [props.store.isLoading, meeting?.id]);

  useEffect(() => {
    const fetchData = async () => {
      const result = await props.store.segmentTagStore.getAll();
      setSegmentTags(result);
    };
    void fetchData();
  }, [props.store.isLoading, props.meetingId]);

  const meetingSummary = meeting?.summary?.toLocaleLowerCase() || '';
  const relevantTags = segmentTags.filter((t) => {
    const isTextTheSame =
      (t.segmentSummary || '').length > 1 &&
      meetingSummary.length > 1 &&
      t.segmentSummary === meetingSummary;
    const isIdTheSame = t.segmentId === meeting?.id;
    return isIdTheSame || isTextTheSame;
  });

  const toggleMeetingTag = (tag: string, meetingId: string, meetingSummary: string) => {
    const updateData = async () => {
      if (isSegmentTagSelected(meetingId, tag, segmentTags)) {
        await props.store.segmentTagStore.deleteAllForTag(tag);
      } else {
        await props.store.segmentTagStore.create(tag, meetingId, meetingSummary);
      }
      const result = await props.store.segmentTagStore.getAll();
      setSegmentTags(result);
    };
    void updateData();
  };

  if (!meeting) {
    return null;
  }
  const shouldShowMeetingLink = !!meeting.videoLink;
  const hasAttendees = attendees.length > 0;
  const hasDescription = meeting.description && meeting.description.length > 0;

  const isHtml = meeting.description && /<\/?[a-z][\s\S]*>/i.test(meeting.description);

  const hasMeetingNotes = !!meeting.meetingNotesLink;
  const isMeetingDescriptionIsMicrosoftHtml =
    isHtml && meeting.description?.includes('<span itemscope');
  const hasWebsites = websites.length > 0 || relevantTags.length > 0;
  return (
    <Row>
      <AddTagToMeetingDialog
        meeting={meeting}
        userTags={props.websiteTags}
        isOpen={isAddTagsVisible}
        store={props.store}
        meetingTags={segmentTags}
        toggleMeetingTag={toggleMeetingTag}
        close={() => setAddTagsVisible(false)}
      />
      <Box
        display="flex"
        className={classes.topContainer}
        justifyContent="space-between"
        alignItems="center"
      >
        <Box flex="0 0 50%">
          <Typography variant="h2" gutterBottom>
            {meeting.summary || '(no title)'}
          </Typography>
          <Typography variant="body2">
            {format(meeting.start, 'EEEE, MMMM d')} ⋅ {format(meeting.start, 'p')} –{' '}
            {format(meeting.end, 'p')}
          </Typography>
        </Box>
        <Box flex="0 0 50%">
          <Box display="flex" gap={2} alignItems="center" justifyContent="flex-end">
            {hasMeetingNotes && (
              <Box>
                <Tooltip title="Open meeting notes">
                  <IconButton
                    color="primary"
                    onClick={() => window.open(meeting.meetingNotesLink, '_blank')}
                    className={classes.iconButton}
                    size="large"
                  >
                    <SaveIcon
                      width={config.ICON_SIZE}
                      height={config.ICON_SIZE}
                      className={classes.iconPrimary}
                    />
                  </IconButton>
                </Tooltip>
              </Box>
            )}
            <Box>
              <Button
                onClick={() => setAddTagsVisible(true)}
                variant="outlined"
                disableElevation
                color="primary"
                startIcon={
                  <PlusIcon
                    width={config.ICON_SIZE}
                    height={config.ICON_SIZE}
                    className={classes.iconPrimary}
                  />
                }
                className={classes.button}
              >
                Add Tags
              </Button>
            </Box>
            <Box>
              <EmailGuestsButton
                meeting={meeting}
                websites={websites}
                websiteStore={props.store.websiteStore}
              />
            </Box>
            {shouldShowMeetingLink && (
              <Box>
                <Button
                  onClick={() => window.open(meeting.videoLink, '_blank')}
                  variant="contained"
                  disableElevation
                  color="primary"
                  startIcon={
                    <VideoIcon
                      width={config.ICON_SIZE}
                      height={config.ICON_SIZE}
                      className={classes.iconPrimary}
                    />
                  }
                  className={classes.button}
                >
                  Join
                </Button>
              </Box>
            )}
          </Box>
        </Box>
      </Box>
      <div className={classes.container}>
        {hasWebsites && (
          <div className={classes.section} id="websites">
            <Box display="flex" alignItems="center" gap={2} flexWrap="wrap">
              <Box>
                <Typography variant="h3" className={classes.rowText}>
                  Filter by:
                </Typography>
              </Box>
              <Box>
                <Typography
                  variant="h3"
                  className={clsx(classes.tag, currentTag === 'all' && classes.tagSelected)}
                  onClick={() => setTag('all')}
                >
                  All
                </Typography>
              </Box>
              {relevantTags.map((t) => (
                <Box key={t.tag}>
                  <Typography
                    variant="h3"
                    className={clsx(classes.tag, currentTag === t.tag && classes.tagSelected)}
                    onClick={() => setTag(t.tag)}
                  >
                    {t.tag}
                  </Typography>
                </Box>
              ))}
            </Box>
            <br />
            {currentTag === 'all' && (
              <Box sx={{ flexGrow: 1 }} gap={isMobile ? 5 : 6}>
                <Grid container columns={3} spacing={2}>
                  {websites.map((item) => (
                    <Grid size={1} key={item.id}>
                      <LargeWebsite
                        item={item}
                        store={props.store}
                        websiteTags={props.websiteTags}
                        toggleWebsiteTag={props.toggleWebsiteTag}
                      />
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}
            {currentTag !== 'all' && (
              <WebsiteHighlights
                store={props.store}
                websiteTags={props.websiteTags}
                toggleWebsiteTag={props.toggleWebsiteTag}
                filterByTag={currentTag}
                websiteCache={props.websiteCache}
              />
            )}
          </div>
        )}
        {hasDescription && !isHtml && (
          <div className={classes.section}>
            <Typography variant="h3" className={classes.rowText}>
              Description
            </Typography>
            <Typography className={classes.description}>
              <Linkify>{meeting.description?.trim()}</Linkify>
            </Typography>
          </div>
        )}
        {hasDescription && isHtml && (
          <div className={classes.section}>
            <Typography variant="h3" className={classes.rowText}>
              Description
            </Typography>
            <Typography
              className={clsx(
                classes.description,
                isMeetingDescriptionIsMicrosoftHtml && classes.descriptionMicrosoft,
              )}
              dangerouslySetInnerHTML={{ __html: meeting.description.trim() }}
            />
          </div>
        )}
        {hasAttendees && (
          <div className={classes.section} id="people">
            <Typography variant="h3" className={classes.rowText}>
              Guests
            </Typography>
            <AttendeeList
              personStore={props.store.personDataStore}
              attendees={attendees}
              showAll={false}
              isSmall={true}
            />
          </div>
        )}
        {meeting.location && (
          <div className={classes.section}>
            <Typography variant="h3" className={classes.rowText}>
              Location
            </Typography>
            <MuiLink
              className={classes.overflowEllipsis}
              href={`https://maps.google.com/?q=${meeting.location}`}
            >
              {meeting.location}
            </MuiLink>
          </div>
        )}
      </div>
    </Row>
  );
};

export default ExpandedMeeting;
